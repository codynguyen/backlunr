{"name":"Backlunr","tagline":"is a solution to bring Backbone Collections together with the browser fulltext search engine Lunr.js","body":"backlunr\r\n===========\r\n\r\nis a solution to bring [Backbone Collections](http://documentcloud.github.com/backbone/#Collection) together with the browser fulltext search engine [Lunr.js](http://lunrjs.com/).\r\n\r\n*Written in coffee-script*\r\n\r\n**INFO: all examples are written in coffee-script**\r\n\r\n\r\n## Install\r\n\r\nTo use **backlunr** you first have to load the dependencies:\r\n- [Underscore](http://documentcloud.github.com/underscore) \r\n- [Backbone](http://documentcloud.github.com/backbone) \r\n- [Lunr.js](http://lunrjs.com/)\r\n\r\nThen add the `backlunr.js` script to your page.\r\n\r\n## Usage\r\n\r\n### Config\r\n\r\nTo use the `lunr.js` fulltext search within a collection you have to load `backlunr.js` and use `Backbone.Collection.Lunr` instead of `Backbone.Collection.Lunr`\r\n\r\nThe only thing you have to define are the fields to index.\r\n\r\n**Config Example:**\r\n\r\n```coffee\r\nclass User extends Backbone.Model\r\n\r\nclass Users extends Backbone.Collection.Lunr\r\n\tmodel: User\r\n\tlunroptions: \r\n\t\tfields: [\r\n\t\t\t{ name: \"firstname\", boost: 10 }\r\n\t\t\t{ name: \"lastname\", boost: 5 }\r\n\t\t\t{ name: \"email\" }\r\n\t\t\t{ name: \"address\" }\r\n\t\t]\r\n```\r\n\r\n#### lunroptions\r\n\r\n* `fields` ( Array | Function ): An array of field definitions or a method called on init/reset which has to return the field definitions array\r\n* `fields[ n ]` ( Object ): The field definition\r\n* `fields[ n ].name` ( String - required ): The field name within your model attribute\r\n* `fields[ n ].boost` ( Number - optional: default=1 ): A boost factor for results in this field.\r\n\r\n**Attension:** Currently Lunr.js does not support an indexing of numeric values.\r\n\r\n### search\r\n\r\nTo search within your collection you just have to call `.search( \"[ term ]\" )`.\r\n\r\n**Search Example:**\r\n\r\n```coffee\r\n# add some users\r\nusersCollection = new Users [\r\n\tfirstname: \"Fritz\", lastname: \"Maier\", \"email\": \"fmaier@maier.com\", \"address\": \"Teststreet 123\"\r\n, \r\n\tfirstname: \"Hans\", lastname: \"Schubert\", \"email\": \"hschubert@maier.com\", \"address\": \"Checkway 987\"\r\n]\r\n\r\nresult = usersCollection.search( \"Fritz\" )\r\n# [ User( Fritz ) ]\r\n# returns an array of matching models sorted by the result scoring\r\n\r\nresult.toJSON()\r\n# [ {firstname: \"Fritz\", lastname: \"Maier\", \"email\": \"fmaier@maier.com\", \"address\": \"Teststreet 123\"} ]\r\n# the single special method `toJSON` of the array returns all models converted by `model.toJSON()`.\r\n```\r\n\r\n### Methods\r\n\r\n#### Collection.search( term [, raw ] )\r\n\r\n`.search()` is the only method added to the collection by **Backlunr**.\r\n\r\n**arguments:**\r\n\r\n* `term` ( String - required ): the search term\r\n* `raw` ( Boolean - optional: default=false ): Return the raw lunr result including the `score` and models `cid` as `ref`\r\n\r\n**retuns ( Array ):**\r\n\r\nAn array of matching models.  \r\nIf you define `raw=true` you will receive an array with object like `{ score: 0.789, ref: \"c123\" }`\r\n\r\n* `toJSON()` If `raw=false` you can use the special `toJSON` method to transform the aray of models to an array of model attributes.\r\n\r\n## Ideas\r\n\r\n* Create a solution to search in multiple collections by hooking them to a global search module. If a search has been done the result will return all matching models in al hooked collection including the type ( Collection name )\r\n\r\n## Work in progress\r\n\r\n`backlunr` is work in progress. Your ideas, suggestions etc. are very welcome.\r\n\r\n## Changelog\r\n\r\n`0.1.0` Initial version\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2010 TCS &lt;dev (at) tcs.de&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}